@use 'sass:map';
@use 'stylekit/core';

// -----------------------------------------------------------------------------
// Auto grid
// -----------------------------------------------------------------------------

$responsive: map.get(core.$compiled-config, layouts, auto-grid, responsive);
$columns: map.get(core.$compiled-config, layouts, auto-grid, columns);
$column-size: map.get(core.$compiled-config, layouts, auto-grid, column-size);
$gap: map.get(core.$compiled-config, layouts, auto-grid, gap);
// $column: map.get(core.$compiled-config, layouts, auto-grid, column);
// $row: map.get(core.$compiled-config, layouts, auto-grid, row);

@if (core.$exclude-layouts != true) {
	.#{core.$prefix-namespace}#{core.$prefix-layouts}auto-grid {
		--#{core.$prefix-namespace}columns: #{$columns};
		--#{core.$prefix-namespace}column-size: #{$column-size};
		--#{core.$prefix-namespace}gap: #{$gap};

		display: grid;
		grid-template-columns: repeat(var(--#{core.$prefix-namespace}columns), minmax(min(100%, var(--column-size)), 1fr));
		gap: var(--#{core.$prefix-namespace}gap);

		> * {
			// --#{core.$prefix-namespace}column: #{$column};
			// --#{core.$prefix-namespace}row: #{$row};
			
			// grid-column: var(--#{core.$prefix-namespace}column);
			// grid-row: var(--#{core.$prefix-namespace}row);
			max-width: 100%;
			min-width: 0;
			min-height: 0;
		}
		
		@if ((($responsive == true) or (core.$all-responsive == true)) and (core.$breakpoints != null)) {
			$prev-breakpoint: '';

			@each $breakpoint in map.keys(core.$breakpoints) {
				$current-namespace: #{core.$prefix-namespace}#{$breakpoint};
				$prev-namespace: #{core.$prefix-namespace}#{$prev-breakpoint};

				@include core.media($breakpoint) {
					--#{$current-namespace}-columns: var(--#{$prev-namespace}columns);
					--#{$current-namespace}-column-size: var(--#{$prev-namespace}column-size);
					--#{$current-namespace}-gap: var(--#{$prev-namespace}gap);
					
					grid-template-columns: repeat(var(--#{$current-namespace}-columns), minmax(min(100%, var(--#{$current-namespace}-column-size)), 1fr));
					gap: var(--#{$current-namespace}-gap);

					// > * {
					// 	--#{$current-namespace}-column: var(--#{$prev-namespace}column);
					// 	--#{$current-namespace}-row: var(--#{$prev-namespace}row);
						
					// 	grid-column: var(--#{$current-namespace}-column);
					// 	grid-row: var(--#{$current-namespace}-row);
					// }
				}

				$prev-breakpoint: #{$breakpoint}-;
			}
		}
	}
}


